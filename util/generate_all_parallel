#!/bin/bash

if [ ! -f util/.serverpod_util_root ]; then
    echo "Run this script from the root of the Serverpod repository"
    echo "I.e. util/generate_all_parallel"
    exit 1
fi

generateServerUpgradeFiles() {
    # The upgrade folder doesn't have all the files needed
    # run `serverpod generate`. Therefore some project files have
    # to temporarily be copied over from the base projectname_server template.

    # Save current files
    find . -type f | sort > before.txt

    # Copy over project files temporarily from base projectname_server template
    cp -rn $BASE/templates/serverpod_templates/projectname_server/lib/src/* lib/src/
    cp $BASE/templates/serverpod_templates/projectname_server/pubspec.yaml pubspec.yaml
    cp -r $BASE/templates/serverpod_templates/projectname_server/.dart_tool .

    dart $CLI generate --no-analytics

    # Save files after generation
    find . -type f | sort > after.txt

    # Remove all generated files except the test tools file.
    # The generated endpoint files are already tracked in projectname_server,
    # and should not be tracked again in the upgrade template.
    test_tools_file="test/integration/test_tools/serverpod_test_tools.dart"
    comm -13 before.txt after.txt | grep -v "$test_tools_file" | xargs rm
    rm before.txt
}

# Function to run generation and capture output
generate_project() {
    local name=$1
    local path=$2
    local extra_args=$3
    
    echo "Starting: $name"
    cd "$path" && dart "$CLI" generate --no-analytics $extra_args 2>&1 | while read line; do
        echo "[$name] $line"
    done
    if [ $? -eq 0 ]; then
        echo "✅ Done: $name"
    else
        echo "❌ Failed: $name"
    fi
}

# Function to run a batch of projects in parallel
run_batch() {
    local batch_num=$1
    shift
    echo -e "\n📦 Starting batch $batch_num...\n"
    
    # Start all projects in this batch in background
    for project in "$@"; do
        eval "$project &"
    done
    
    # Wait for this batch to complete
    wait
    echo -e "\n✅ Batch $batch_num completed!\n"
}

# Makes script exit on first non-zero error code
set -e

BASE=`pwd`
CLI_DIR=$BASE/tools/serverpod_cli
CLI=$CLI_DIR/bin/serverpod_cli.dart

# Set batch size (adjust this to control how many processes run at once)
# Default is 4, but you can change this based on your system capabilities
BATCH_SIZE=${BATCH_SIZE:-4}

echo "pub get cli"
cd $CLI_DIR
dart pub get

echo -e "\n🚀 Starting batched parallel generation (batch size: $BATCH_SIZE)...\n"

# Define all generation tasks
declare -a tasks=(
    'generate_project "serverpod" "$BASE/packages/serverpod" ""'
    'generate_project "chat_server" "$BASE/examples/chat/chat_server" ""'
    'generate_project "auth_example_server" "$BASE/examples/auth_example/auth_example_server" ""'
    'generate_project "modulename_server" "$BASE/templates/serverpod_templates/modulename_server" ""'
    'generate_project "projectname_server" "$BASE/templates/serverpod_templates/projectname_server" ""'
    '(cd "$BASE/templates/serverpod_templates/projectname_server_upgrade" && echo "Starting: projectname_server_upgrade" && generateServerUpgradeFiles 2>&1 | while read line; do echo "[projectname_server_upgrade] $line"; done && echo "✅ Done: projectname_server_upgrade")'
    'generate_project "serverpod_auth_server" "$BASE/modules/serverpod_auth/serverpod_auth_server" ""'
    'generate_project "serverpod_auth_core_server" "$BASE/modules/new_serverpod_auth/serverpod_auth_core/serverpod_auth_core_server" ""'
    'generate_project "serverpod_auth_migration_server" "$BASE/modules/new_serverpod_auth/serverpod_auth_migration/serverpod_auth_migration_server" ""'
    'generate_project "serverpod_auth_idp_server" "$BASE/modules/new_serverpod_auth/serverpod_auth_idp/serverpod_auth_idp_server" ""'
    'generate_project "serverpod_auth_bridge_server" "$BASE/modules/new_serverpod_auth/serverpod_auth_bridge/serverpod_auth_bridge_server" ""'
    'generate_project "serverpod_chat_server" "$BASE/modules/serverpod_chat/serverpod_chat_server" ""'
    'generate_project "serverpod_test_server" "$BASE/tests/serverpod_test_server" "--experimental-features=all"'
    'generate_project "serverpod_test_module_server" "$BASE/tests/serverpod_test_module/serverpod_test_module_server" "--experimental-features=all"'
    'generate_project "serverpod_test_nonvector_server" "$BASE/tests/serverpod_test_nonvector/serverpod_test_nonvector_server" "--experimental-features=all"'
    'generate_project "serverpod_new_auth_test_server" "$BASE/tests/serverpod_new_auth_test/serverpod_new_auth_test_server" ""'
)

# Process tasks in batches
batch_num=1
batch=()

for i in "${!tasks[@]}"; do
    batch+=("${tasks[$i]}")
    
    # If batch is full or we're at the last task, run the batch
    if [ ${#batch[@]} -eq $BATCH_SIZE ] || [ $i -eq $((${#tasks[@]} - 1)) ]; then
        run_batch $batch_num "${batch[@]}"
        batch=()
        ((batch_num++))
    fi
done

echo -e "\n✨ All generation tasks completed!\n"