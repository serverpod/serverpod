/* AUTOMATICALLY GENERATED CODE DO NOT MODIFY */
/*   To generate run: "serverpod generate"    */

// ignore_for_file: implementation_imports
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: public_member_api_docs
// ignore_for_file: type_literal_in_constant_pattern
// ignore_for_file: use_super_parameters
// ignore_for_file: invalid_use_of_internal_member

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:serverpod_client/serverpod_client.dart' as _i1;
import 'dart:async' as _i2;
import 'package:serverpod_auth_core_client/src/protocol/common/models/auth_success.dart'
    as _i3;
import 'package:serverpod_auth_core_client/src/protocol/profile/models/user_profile_model.dart'
    as _i4;
import 'dart:typed_data' as _i5;

/// Endpoint for getting status and managing a signed in user.
/// {@category Endpoint}
class EndpointStatus extends _i1.EndpointRef {
  EndpointStatus(_i1.EndpointCaller caller) : super(caller);

  @override
  String get name => 'serverpod_auth_core.status';

  /// Returns true if the client user is signed in.
  _i2.Future<bool> isSignedIn() => caller.callServerEndpoint<bool>(
        'serverpod_auth_core.status',
        'isSignedIn',
        {},
      );

  /// Signs out a user from the current device.
  _i2.Future<void> signOutDevice() => caller.callServerEndpoint<void>(
        'serverpod_auth_core.status',
        'signOutDevice',
        {},
      );

  /// Signs out a user from all active devices.
  _i2.Future<void> signOutAllDevices() => caller.callServerEndpoint<void>(
        'serverpod_auth_core.status',
        'signOutAllDevices',
        {},
      );
}

/// Endpoint for JWT tokens management.
/// {@category Endpoint}
class EndpointRefreshJwtTokens extends _i1.EndpointRef {
  EndpointRefreshJwtTokens(_i1.EndpointCaller caller) : super(caller);

  @override
  String get name => 'serverpod_auth_core.refreshJwtTokens';

  /// Creates a new token pair for the given [refreshToken].
  ///
  /// Can throw the following exceptions:
  /// -[RefreshTokenMalformedException]: refresh token is malformed and could
  ///   not be parsed. Not expected to happen for tokens issued by the server.
  /// -[RefreshTokenNotFoundException]: refresh token is unknown to the server.
  ///   Either the token was deleted or generated by a different server.
  /// -[RefreshTokenExpiredException]: refresh token has expired. Will happen
  ///   only if it has not been used within configured `refreshTokenLifetime`.
  /// -[RefreshTokenInvalidSecretException]: refresh token is incorrect, meaning
  ///   it does not refer to the current secret refresh token. This indicates
  ///   either a malfunctioning client or a malicious attempt by someone who has
  ///   obtained the refresh token. In this case the underlying refresh token
  ///   will be deleted, and access to it will expire fully when the last access
  ///   token is elapsed.
  ///
  /// This endpoint is unauthenticated, meaning the client won't include any
  /// authentication information with the call.
  _i2.Future<_i3.AuthSuccess> refreshAccessToken(
          {required String refreshToken}) =>
      caller.callServerEndpoint<_i3.AuthSuccess>(
        'serverpod_auth_core.refreshJwtTokens',
        'refreshAccessToken',
        {'refreshToken': refreshToken},
        authenticated: false,
      );
}

/// Base endpoint for user profile management.
///
/// To expose these endpoint methods on your server, extend this class in a
/// concrete class.
/// For further details see https://docs.serverpod.dev/concepts/working-with-endpoints#inheriting-from-an-endpoint-class-marked-abstract
/// {@category Endpoint}
abstract class EndpointUserProfileBase extends _i1.EndpointRef {
  EndpointUserProfileBase(_i1.EndpointCaller caller) : super(caller);

  /// Returns the user profile of the current user.
  _i2.Future<_i4.UserProfileModel> get();

  /// Removes the users uploaded image, replacing it with the default user
  /// image.
  _i2.Future<_i4.UserProfileModel> removeUserImage();

  /// Sets a new user image for the signed in user.
  _i2.Future<_i4.UserProfileModel> setUserImage(_i5.ByteData image);

  /// Changes the name of a user.
  _i2.Future<_i4.UserProfileModel> changeUserName(String? userName);

  /// Changes the full name of a user.
  _i2.Future<_i4.UserProfileModel> changeFullName(String? fullName);
}

/// Base endpoint for auth sessions.
///
/// To expose these endpoint methods on your server, extend this class in a
/// concrete class.
/// For further details see https://docs.serverpod.dev/concepts/working-with-endpoints#inheriting-from-an-endpoint-class-marked-abstract
/// {@category Endpoint}
abstract class EndpointSessionBase extends _i1.EndpointRef {
  EndpointSessionBase(_i1.EndpointCaller caller) : super(caller);

  /// Checks whether the caller is authenticated.
  ///
  /// Return `true` if the caller is authentication, `false` otherwise.
  /// Does not error on missing authentication.
  _i2.Future<bool> isAuthenticated();

  /// Logs out the current user.
  ///
  /// Returns `true` if the user was actually logged out, and `false` if the
  /// calling session was not valid anymore.
  _i2.Future<bool> logout({required bool allSessions});
}

class Caller extends _i1.ModuleEndpointCaller {
  Caller(_i1.ServerpodClientShared client) : super(client) {
    status = EndpointStatus(this);
    refreshJwtTokens = EndpointRefreshJwtTokens(this);
  }

  late final EndpointStatus status;

  late final EndpointRefreshJwtTokens refreshJwtTokens;

  @override
  Map<String, _i1.EndpointRef> get endpointRefLookup => {
        'serverpod_auth_core.status': status,
        'serverpod_auth_core.refreshJwtTokens': refreshJwtTokens,
      };
}
