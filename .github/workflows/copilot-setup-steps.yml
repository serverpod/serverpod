name: "Copilot Setup Steps"

# This workflow sets up the Serverpod development environment for GitHub Copilot
# with enhanced network resilience for restricted environments.
#
# Network Resilience Features:
# - Aggressive caching of Flutter SDK and Dart dependencies
# - Retry logic for network operations (3 attempts)
# - Offline fallback mode using cached packages
# - Graceful degradation when network access is limited
# 
# The setup is designed to work even when these URLs are blocked:
# - https://storage.googleapis.com/flutter_infra_release/
# - https://pub.dev/
# - https://storage.googleapis.com/dart-archive/
#
# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter with enhanced caching
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'
          channel: 'stable'
          cache: true

      - name: Cache Dart dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.dart_tool
            **/pubspec.lock
          key: ${{ runner.os }}-dart-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-dart-

      - name: Verify Dart version
        run: |
          dart --version
          echo "Dart SDK version should be >= 3.5.0"

      - name: Install Melos (globally and locally)
        run: |
          # Install melos globally for convenience
          dart pub global activate melos
          # Also ensure local workspace dependencies are available
          dart pub get || echo "Workspace dependencies not fully available"

      - name: Set SERVERPOD_HOME environment variable
        run: echo "SERVERPOD_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV

      - name: Install all dependencies with network resilience
        run: |
          # Set pub environment variables for better caching and offline mode
          export PUB_CACHE="$HOME/.pub-cache"
          export PUB_HOSTED_URL="https://pub.dev"
          
          echo "Attempting to install dependencies with network access..."
          # Try melos bootstrap with retries and fallback to offline mode
          BOOTSTRAP_SUCCESS=false
          
          for i in {1..3}; do
            echo "Attempt $i of 3..."
            if timeout 600 melos bootstrap; then
              echo "✅ Dependencies installed successfully"
              BOOTSTRAP_SUCCESS=true
              break
            else
              echo "⚠️  Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            fi
          done
          
          # If network install failed, try offline mode
          if [ "$BOOTSTRAP_SUCCESS" = false ]; then
            echo "🔄 Network installation failed, attempting offline mode..."
            if melos bootstrap --offline; then
              echo "✅ Offline dependency resolution succeeded"
              BOOTSTRAP_SUCCESS=true
            else
              echo "⚠️  Offline mode also failed. This is expected in network-restricted environments."
              echo "📝 Some packages may not be available, but continuing with partial setup..."
            fi
          fi
          
          # Always exit with success to not block the Copilot agent
          # The agent can work with partial dependency resolution
          exit 0

      - name: Activate Serverpod CLI from source
        run: |
          cd tools/serverpod_cli
          echo "🔧 Setting up Serverpod CLI..."
          
          # Try to get dependencies for CLI specifically with fallbacks
          if dart pub get --offline; then
            echo "✅ CLI dependencies resolved from cache"
          elif dart pub get; then
            echo "✅ CLI dependencies resolved from network"
          else
            echo "⚠️  CLI dependencies partially available"
          fi
          
          # Try to activate the CLI
          if dart pub global activate --source path .; then
            echo "✅ CLI activated successfully"
          else
            echo "⚠️  CLI activation may be limited in restricted environment"
          fi

      - name: Verify CLI installation (best effort)
        run: |
          if command -v serverpod >/dev/null 2>&1; then
            serverpod --version
            echo "✅ CLI verification successful"
          else
            echo "⚠️  CLI verification failed - this is expected in restricted environments"
            echo "📝 CLI functionality may be limited but basic operations should work"
          fi

      - name: Add test hosts to /etc/hosts
        run: |
          echo "127.0.0.1 serverpod_test_server" | sudo tee -a /etc/hosts
          echo "127.0.0.1 postgres" | sudo tee -a /etc/hosts
          echo "127.0.0.1 redis" | sudo tee -a /etc/hosts

      - name: Pre-populate pub cache for common packages
        run: |
          # Create a minimal pubspec.yaml to pre-cache essential dependencies
          mkdir -p /tmp/pub-cache-prep
          cd /tmp/pub-cache-prep
          cat > pubspec.yaml << 'EOF'
          name: cache_prep
          environment:
            sdk: '>=3.5.0 <4.0.0'
          dependencies:
            meta: any
            collection: any
            http: any
            path: any
          EOF
          
          # Try to get these essential packages cached
          echo "🔄 Pre-caching essential Dart packages..."
          if dart pub get --offline; then
            echo "✅ Essential packages already cached"
          elif dart pub get; then
            echo "✅ Essential packages cached from network"
          else
            echo "⚠️  Essential package caching failed - continuing anyway"
          fi

      - name: Setup Summary
        run: |
          echo "📋 Serverpod Copilot Setup Summary:"
          echo "=================================="
          echo "✅ Repository checked out"
          echo "✅ Flutter SDK: $(flutter --version | head -1)"
          echo "✅ Dart SDK: $(dart --version | cut -d' ' -f4)"
          echo "✅ Melos: Available"
          echo "✅ SERVERPOD_HOME: $SERVERPOD_HOME"
          echo "✅ Test hosts configured"
          
          if command -v serverpod >/dev/null 2>&1; then
            echo "✅ Serverpod CLI: $(serverpod --version 2>/dev/null || echo 'Available')"
          else
            echo "⚠️  Serverpod CLI: Limited (expected in restricted environments)"
          fi
          
          echo ""
          echo "🚀 Environment ready for Copilot development!"
          echo "📝 Note: Some features may be limited in network-restricted environments."
